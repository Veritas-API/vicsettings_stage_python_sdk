# coding: utf-8

"""
    Veritas Information Classifier (VIC)

    APIs

    OpenAPI spec version: Resource Specific
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ErrorResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, status_code=None, message=None, error=None):
        """
        ErrorResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'status_code': 'int',
            'message': 'str',
            'error': 'str'
        }

        self.attribute_map = {
            'status_code': 'statusCode',
            'message': 'message',
            'error': 'error'
        }

        self._status_code = status_code
        self._message = message
        self._error = error

    @property
    def status_code(self):
        """
        Gets the status_code of this ErrorResponse.

        :return: The status_code of this ErrorResponse.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """
        Sets the status_code of this ErrorResponse.

        :param status_code: The status_code of this ErrorResponse.
        :type: int
        """

        self._status_code = status_code

    @property
    def message(self):
        """
        Gets the message of this ErrorResponse.

        :return: The message of this ErrorResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ErrorResponse.

        :param message: The message of this ErrorResponse.
        :type: str
        """

        self._message = message

    @property
    def error(self):
        """
        Gets the error of this ErrorResponse.

        :return: The error of this ErrorResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this ErrorResponse.

        :param error: The error of this ErrorResponse.
        :type: str
        """
        allowed_values = ["SERVER_ERROR", "CLIENT_ERROR", "NO_POLICIES_ENABLED", "NO_POLICIES_LOADED", "UNKNOWN_POLICY", "CLIENT_FILE_NOT_FOUND", "CONTENT_TOO_LARGE", "TAG_PROPERTY_DEFINITIONS_UNAVAILABLE"]
        if error not in allowed_values:
            raise ValueError(
                "Invalid value for `error` ({0}), must be one of {1}"
                .format(error, allowed_values)
            )

        self._error = error

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ErrorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
